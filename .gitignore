
import numpy as np
from scipy.stats import norm
import matplotlib.pyplot as plt

# Black-Scholes Call Option Pricing Formula
def black_scholes_call(S, X, T, r, sigma):
    d1 = (np.log(S / X) + (r + 0.5 * sigma**2) * T) / (sigma * np.sqrt(T))
    d2 = d1 - sigma * np.sqrt(T)
    call_price = S * norm.cdf(d1) - X * np.exp(-r * T) * norm.cdf(d2)
    return call_price

# Black-Scholes Put Option Pricing Formula
def black_scholes_put(S, X, T, r, sigma):
    d1 = (np.log(S / X) + (r + 0.5 * sigma**2) * T) / (sigma * np.sqrt(T))
    d2 = d1 - sigma * np.sqrt(T)
    put_price = X * np.exp(-r * T) * norm.cdf(-d2) - S * norm.cdf(-d1)
    return put_price

# Greeks: Delta for Call
def delta_call(S, X, T, r, sigma):
    d1 = (np.log(S / X) + (r + 0.5 * sigma**2) * T) / (sigma * np.sqrt(T))
    return norm.cdf(d1)

# Greeks: Gamma
def gamma(S, X, T, r, sigma):
    d1 = (np.log(S / X) + (r + 0.5 * sigma**2) * T) / (sigma * np.sqrt(T))
    return norm.pdf(d1) / (S * sigma * np.sqrt(T))

# Test the Model with Sample Input
S = 100  
X = 100 
T = 1 
r = 0.05 
sigma = 0.2  

call_price = black_scholes_call(S, X, T, r, sigma)
put_price = black_scholes_put(S, X, T, r, sigma)

print(f"Call Option Price: {call_price:.2f}")
print(f"Put Option Price: {put_price:.2f}")

# Plot Option Prices vs Stock Prices
stock_prices = np.linspace(50, 150, 100)
call_prices = [black_scholes_call(S, X, T, r, sigma) for S in stock_prices]
put_prices = [black_scholes_put(S, X, T, r, sigma) for S in stock_prices]

plt.plot(stock_prices, call_prices, label='Call Option Price')
plt.plot(stock_prices, put_prices, label='Put Option Price')
plt.xlabel('Stock Price')
plt.ylabel('Option Price')
plt.title('Option Prices vs Stock Price')
plt.legend()
plt.show()

